#include <iostream>
using namespace std;
const int N = 9;
class sudoku
{
public:
    int arr[N][N] = { {} };
    int arrr[N][N];
    sudoku() {};
    sudoku(int grid[N][N]);
    void print(int grid[N][N]);
    bool solve(int grid[N][N], int row, int col);
    void enterDigits();
    ~sudoku() {};
private:
    bool isSafe(int grid[N][N], int row, int col, int num);
   };

void sudoku::enterDigits() {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            arrr[i][j] = arr[i][j];
          }
      }
}

sudoku::sudoku(int grid[N][N]){}

void sudoku::print(int arr[N][N])
{
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
            cout << arr[i][j] << " ";
        cout << endl;
    }
}

bool sudoku::isSafe(int grid[N][N], int row, int col, int num){

    for (int x = 0; x <= 8; x++)
        if (grid[row][x] == num)
            return false;


    for (int x = 0; x <= 8; x++)
        if (grid[x][col] == num)
            return false;

   
    int startRow = row - row % 3,
        startCol = col - col % 3;

    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            if (grid[i + startRow][j +
                startCol] == num)
                return false;

    return true;
}


   

bool sudoku::solve(int grid[N][N], int row, int col)
{
    if (row == N - 1 && col == N)
        return true;

    if (col == N) {
        row++;
        col = 0;
    }

    if (grid[row][col] > 0)
        return solve(grid, row, col + 1);

    for (int num = 1; num <= N; num++)
    {
        if (isSafe(grid, row, col, num))
        {
              grid[row][col] = num;

            if (solve(grid, row, col + 1))
                return true;
        }

        grid[row][col] = 0;
    }
    return false;
}



int main() {
    sudoku* sudo_easy = new sudoku();
    sudo_easy->enterDigits();
    if(sudo_easy->solve(sudo_easy->arr, 0, 0)) {
            sudo_easy->print(sudo_easy->arr);
             }
    else {
        std::cout << " no solution exists " << std::endl;
    }
    
    
    
    return 0;
}
